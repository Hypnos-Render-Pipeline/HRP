Pass
{
    $include("Common.hlsl")
    
    $include("RTCommon.hlsl")
    
    $include("SurfaceDescription.hlsl")
	
    SurfaceInfo GetSurfaceInfo(inout FragInputs i) {
			
		SurfaceInfo IN;

		IN.normal = i.tangentToWorld[2];
		IN.normal *= i.isFrontFace ? 1 : -1;
		i.tangentToWorld[2] = IN.normal;
		i.tangentToWorld[0] = cross(i.tangentToWorld[1], i.tangentToWorld[2]);
		i.tangentToWorld[1] = cross(i.tangentToWorld[2], i.tangentToWorld[0]);

        IN.normal = i.tangentToWorld[2];
        IN.tangent = i.tangentToWorld[1];
		IN.gnormal = i.tangentToWorld[2];

        SurfaceDescription res = SurfaceDescriptionFunction(Convert2PixelGraph(i.position.xyz, IN.normal, float4(IN.tangent, 1), 0, i.uv0));
				
		IN.normal = normalize(mul(res.NormalTS * float3(-1,-1,1), i.tangentToWorld));
		i.tangentToWorld[2] = IN.normal;
		i.tangentToWorld[0] = cross(i.tangentToWorld[1], i.tangentToWorld[2]);
		i.tangentToWorld[1] = cross(i.tangentToWorld[2], i.tangentToWorld[0]);

		IN.diffuse = res.BaseColor;
		IN.transparent = 1 - res.Alpha;
								
		float metallic = res.Metallic;
		IN.smoothness = res.Smoothness;

		IN.aniso = 0;
		float aniso_angle = 0;

		IN.diffuse = DiffuseAndSpecularFromMetallic(IN.diffuse, metallic, /*out*/ IN.specular);

		IN.clearCoat = 0;
		IN.sheen = 0;

		IN.emission = 0;
		IN.diffuseAO_specAO = (1).xx;

		IN.index = 1;

		IN.Ld = 0;
					
		float2 xy; sincos(aniso_angle * 2 * PI, xy.y, xy.x);
		IN.tangent = mul(float3(xy, 0), i.tangentToWorld);

		IN.discarded = 0;
				
		IN.clearCoat *= 1 - IN.transparent;

		return IN;
    }

	//----------------------------------------------------------------------------------------
	//------- DXR Shader functions - don't change them unless you know what you are doing ----
	//----------------------------------------------------------------------------------------
	[shader("closesthit")]
	void ClosestHit(inout RayIntersection rayIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes) {
		LitClosestHit(/*inout*/rayIntersection, attributeData);
	}

	[shader("anyhit")]
	void AnyHit(inout RayIntersection rayIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
	{
		LitAnyHit(/*inout*/rayIntersection, attributeData);
	}
	
	ENDHLSL
} 