#pragma kernel Clear
#pragma kernel AddSample
#pragma kernel Filter

#define HISTO_SIZE 10


float2 _Pixel_WH;
int _SubFrameIndex;

struct Histogram {
    float3 bin[HISTO_SIZE];
    float totalSampleNum;
    int bitMask;
};

RWStructuredBuffer<Histogram> _HistogramBuffer;
RWTexture2D<float4> _History;
Texture2D<float4> _FrameSamples;
Texture2D<float4> _Variance;
RWTexture2D<float4> _Denoised;

int UnRoll(int2 idx) {
    int2 wh = int2(_Pixel_WH.xy);
    idx = clamp(idx, 0, wh - 1);
    return idx.x + wh.x * idx.y;
}

void ClearHistogram(int id) {
    _HistogramBuffer[id].totalSampleNum = 0;
    _HistogramBuffer[id].bitMask = 0;
    for (int i = 0; i < HISTO_SIZE; i++)
        _HistogramBuffer[id].bin[i] = 0;
}

void AddSample(int id, float4 s) {
    if (s.w == 0) return;
    _HistogramBuffer[id].totalSampleNum += 1;

    int3 idx = floor(min(s.xyz, 0.999) * HISTO_SIZE);

    _HistogramBuffer[id].bin[idx.x].x += 1;
    _HistogramBuffer[id].bin[idx.y].y += 1;
    _HistogramBuffer[id].bin[idx.z].z += 1;
    _HistogramBuffer[id].bitMask |= (1 << idx.x);
    _HistogramBuffer[id].bitMask |= (1 << idx.y);
    _HistogramBuffer[id].bitMask |= (1 << idx.z);
}

float Compare(Histogram x, int id1) {
    Histogram y = _HistogramBuffer[id1];

    float nx = x.totalSampleNum;
    float ny = y.totalSampleNum;

    if (nx * ny == 0) return 1;

    int mask = x.bitMask | y.bitMask;

    float sqrt_y_x = sqrt(ny / nx);
    float sqrt_x_y = sqrt(nx / ny);

    float3 p_ = 0;
    float3 res_ = 0;

    for (int i = 0; i < HISTO_SIZE; i++)
    {
        //if (mask & (1 << i)) 
        {
            float3 hx = x.bin[i];
            float3 hy = y.bin[i];

            p_ += hx + hy != 0;
            float3 t = sqrt_y_x * hx - sqrt_x_y * hy;
            res_ += max(0, t * t / (hx + hy));
        }
    }

    float p = dot(p_, 1);
    float res = dot(res_, 1);

    return p == 0 ? 0 : res / p;
}

float ComparePatch(Histogram x, int2 id1) {
    return Compare(x, UnRoll(id1));
    // too expensive in progressive method
    //float res = 0;
    //for (int i = -1; i <= 1; i++)
    //{
    //    for (int j = -1; j <= 1; j++)
    //    {
    //        int2 offset = int2(i, j);
    //        int2 gsId = baseId + offset;
    //        res += Compare(UnRoll(id0 + offset), UnRoll(id1 + offset));
    //    }
    //}
    //return res / 9;
}


[numthreads(32, 1, 1)]
void Clear(uint id : SV_DispatchThreadID)
{
    if (id >= uint(_Pixel_WH.x * _Pixel_WH.y)) return;
    ClearHistogram(id);
}


[numthreads(8,8,1)]
void AddSample(uint2 id : SV_DispatchThreadID)
{
    if (any(id >= uint2(_Pixel_WH.xy))) return;
    AddSample(UnRoll(id), _FrameSamples[id]);
}


[numthreads(8, 8, 1)]
void Filter(uint2 id : SV_DispatchThreadID)
{
    uint sub_frame = (uint)_SubFrameIndex % (4 * 4);

    uint layer = sub_frame % 4;
    uint2 offset = uint2((layer & 1), (layer + (layer >> 1)) & 1) * 2;
    layer = sub_frame / 4 % 4;
    offset += uint2((layer & 1), (layer + (layer >> 1)) & 1) * 1;

    id = id * 4 + offset;

    if (any(id >= uint2(_Pixel_WH.xy))) return;

    Histogram x = _HistogramBuffer[UnRoll(id)];

    int2 wh = int2(_Pixel_WH.xy) - 1;
    float variance;
    {
        variance = _Variance[id].a;
        variance += _Variance[max(id - int2(0, 1), 0)].a;
        variance += _Variance[min(id + int2(0, 1), wh)].a;
        variance += _Variance[max(id - int2(1, 0), 0)].a;
        variance += _Variance[min(id - int2(1, 0), wh)].a;
        variance += _Variance[max(id - int2(0, 1), 0)].a;
        variance += _Variance[min(id + int2(0, 1), wh)].a;
        variance += _Variance[max(id - int2(1, 0), 0)].a;
        variance += _Variance[min(id - int2(1, 0), wh)].a;
        variance /= 5;
    }
    variance = saturate(variance * 2 - 0.1);

    [branch]
    if (variance == 0 || x.totalSampleNum == 0)
    {
        _Denoised[id] = _History[id];
        return;
    }

    {
        float k = lerp(3, 1.2, variance);
        float4 res = 0;
        for (int i = -5; i <= 5; i++)
        {
            for (int j = -5; j <= 5; j++)
            {
                int2 pairId = id + int2(i, j);
                float w = max(0, 1 - k * ComparePatch(x, pairId));
                res += float4(_History[clamp(pairId, 0, wh)].xyz * w, w);
            }
        }
        _Denoised[id] = res / res.w;
    }
}
