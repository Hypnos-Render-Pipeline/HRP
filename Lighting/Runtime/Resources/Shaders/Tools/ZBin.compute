#pragma kernel TileCulling
#pragma kernel BinCulling

#pragma use_dxc

#define ZIBIN_COMPUTE
#include "../Includes/Light.hlsl"
 
float4x4 _V_Inv;
float4x4 _VP_Inv;


float2 _WH;
RWTexture2D<float3> _Debug;


groupshared uint bits[32];
uint LaneScanExclude(uint laneNum, uint lanOffset, uint laneId, uint value) {

    bits[lanOffset + laneId] = value;

    uint res = 0;
    if (laneId == 0) {
        for (uint i = 0; i < laneNum; i++)
        {
            uint res_ = res + bits[lanOffset + i];
            bits[lanOffset + i] = res;
            res = res_;
        }
    }

    GroupMemoryBarrier();

    return bits[lanOffset + laneId];
}


inline float4 GetPlane(float3 normal, float3 inPoint)
{
    return float4(normal, -dot(normal, inPoint));
}
inline float4 GetPlane(float3 a, float3 b, float3 c)
{
    float3 normal = normalize(cross(b - a, c - a));
    return float4(normal, -dot(normal, a));
}

bool SphereIntersect(float4 sphere, float4x4 planes)
{
    if (any(mul(planes, float4(sphere.xyz, 1)) > sphere.w)) return false;
    return true;
}
bool SphereIntersect(float4 sphere, float2x4 planes)
{
    if (any(mul(planes, float4(sphere.xyz, 1)) > sphere.w)) return false;
    return true;
}

inline bool PointInsidePlane(float3 vertex, float4 plane)
{
    return (dot(plane.xyz, vertex) + plane.w) < 0;
}
inline bool ConeInsidePlane(float4 position_range, float3 dir, float angle, float4 plane)
{
    float3 m = cross(cross(plane.xyz, dir), dir);
    float3 Q = position_range.xyz + dir * position_range.w + normalize(m) * position_range.w * angle;
    return PointInsidePlane(position_range.xyz, plane) || PointInsidePlane(Q, plane);
}
bool IntersectTriangle(float3 o, float3 d, float3 v0, float3 v1, float3 v2)
{
    float3  E1 = v1 - v0;
    float3  E2 = v2 - v0;
    float3  P = cross(d, E2);
    float det = dot(E1, P);
    float3  T;
    if (det > 0) {
        T = o - v0;
    }
    else {
        T = v0 - o;
        det = -det;
    }
    if (det < 0)
        return false;
    float u = dot(T, P);
    if (u < -1 || u > det + 1)
        return false;
    float3  Q = cross(T, E1);
    float v = dot(d, Q);
    if (v < -1 || u + v > det + 1)
        return false;
    return true;
}

inline bool ConeConeTest(float3 p, float3 v, float t, float3 p1, float3 v1, float d1, float t1) {
    float3 pp1 = p - p1;
    float lpp1 = length(pp1);
    float pp1dotv1 = dot(p - p1, v1);
    if (pp1dotv1 > sqrt(1 - t1 * t1) * lpp1 && pp1dotv1 < d1)return true;

    float3 fp = p1 + v1 * d1;
    float3 v_ = normalize(normalize(cross(cross(v, fp - p), v)) * t + v);
    float dis = dot(fp - p, v1) / dot(v_, v1);
    if (distance(dis * v_ + p, fp) < d1 * t1 + dis * t) return true;


    float3 ta = normalize(cross(v1, v));
    float3 n = normalize(cross(ta, v1));
    dis = (d1 + 1) * t1;
    p1 -= v1;
    float3 p2 = fp + ta * (dis + 1);
    float3 p3 = fp - ta * (dis * 1);

    if (IntersectTriangle(p, v, p1, p2, p3)) return true;

    return false;
}

bool ConeIntersect(float4 position_range, float3 dir, float angle, float4x4 planes)
{
    [unroll]
    for (uint i = 0; i < 4; ++i)
    {
        if (!ConeInsidePlane(position_range, dir, angle, planes[i])) return false;
    }
    return true;
}
bool ConeIntersect(float4 position_range, float3 dir, float angle, float2x4 planes)
{
    [unroll]
    for (uint i = 0; i < 2; ++i)
    {
        if (!ConeInsidePlane(position_range, dir, angle, planes[i])) return false;
    }
    return true;
}

[numthreads(4, 2, 4)]
void TileCulling(uint2 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID)
{
    float3 tileSize;
    tileSize.xy = 2.0f / _TileCount.xy;
    tileSize.z = 0;
    uint4 tileCount = _TileCount;
    uint2 tileId = id;
    uint maxLightCount = tileCount.w;
    uint start_offset = (id.x + id.y * tileCount.x) * (maxLightCount + 1);

    float4 lb = float4(tileId * tileSize.xy - 1, 1, 1);
    float4x4 uvs = transpose(float4x4(lb, lb + tileSize.xzzz, lb + tileSize.zyzz, lb + tileSize.xyzz));

    float4x4 corner = mul(_VP_Inv, uvs);
    float3 cam = _V_Inv._m03_m13_m23;
    float3 p0 = corner._m00_m10_m20 / corner._m30;
    float3 p1 = corner._m01_m11_m21 / corner._m31;
    float3 p2 = corner._m02_m12_m22 / corner._m32;
    float3 p3 = corner._m03_m13_m23 / corner._m33;
    float3 p5 = (p0 + p3) / 2;

    float3 cdir = normalize(p5 - cam);
    float min_cos = min(min(dot(normalize(p0 - cam), cdir), dot(normalize(p1 - cam), cdir)), min(dot(normalize(p2 - cam), cdir), dot(normalize(p3 - cam), cdir)));
    float max_tan = sqrt(1 - min_cos * min_cos) / min_cos;


    float4x4 planes; // we don't need to test far/near clip plane, because cpu has already done this work.

    planes[0] = GetPlane(cam, p0, p2);
    planes[1] = GetPlane(cam, p2, p3);
    planes[2] = GetPlane(cam, p3, p1);
    planes[3] = GetPlane(cam, p1, p0);

    int count = 0;
    int idxs[32];
    uint loopNum = _LocalLightCount / 4 + (_LocalLightCount % 4 != 0 ? 1 : 0);
    for (uint i = 0; i < loopNum; i++)
    {
        uint index = (i << 2) + gtid.z;
        if (index < _LocalLightCount) {
            Light light = _LocalLightBuffer[index];
            if (light.radiance_type.w == POINT) { 
                //if (!SphereIntersect(light.position_range, planes)) continue;
                // Instead of perform Sphere-plane collision test, we use Sphere-cone test, it's faster and will do a more accurate culling.
                float3 ldir = light.position_range.xyz - cam;
                float ldis = length(ldir); ldir /= ldis;
                float cosl = dot(ldir, cdir);
                if (sqrt(1 - cosl * cosl) * ldis - light.position_range.w - cosl * ldis * max_tan > 0) continue;
            }
            else { // spot
                if (!ConeIntersect(light.position_range, light.mainDirection_id.xyz, light.geometry.x, planes)) continue;
                // This Version perform more accurate soft rasterization culling, but cost more time.
                if (!ConeConeTest(cam, cdir, max_tan, light.position_range.xyz, light.mainDirection_id.xyz, light.position_range.w, light.geometry.x)) continue;
            }
            idxs[count++] = index;
        }
    }

    uint offset = LaneScanExclude(4, gtid.x * 8 + gtid.y * 4, gtid.z, count);

    if (gtid.z == 3)
        _TileLights[start_offset] = offset + count;
    start_offset += 1;

    for (uint j = offset; j < offset + count; j++)
    {
        if (j < maxLightCount)
            _TileLights[start_offset + j] = (idxs[j - offset] << 24);
    }
}

[numthreads(1, 1, 32)]
void BinCulling(uint3 id : SV_DispatchThreadID)
{
    uint4 tileCount = _TileCount;

    if (id.z >= tileCount.z) return;

    uint2 tileId = id.xy;
    uint maxLightCount = tileCount.w;
    uint start_offset = (tileId.x + tileId.y * tileCount.x) * (maxLightCount + 1);

    float4 cam_ = mul(_VP_Inv, float4(0, 0, 1, 1));
    float3 cam = cam_.xyz / cam_.w;
    float4 farPlane = mul(_VP_Inv, float4(0, 0, 0, 1));
    farPlane /= farPlane.w;
    float3 viewDir = normalize(farPlane.xyz - cam);
    farPlane.xyz = _Faraway * viewDir + cam;

    float inv_bin = 1.0f / tileCount.z;

    uint lightCount = _TileLights[start_offset];
    start_offset += 1;


    uint mask_value = 1 << id.z;
    float z_uv = id.z * inv_bin; z_uv *= z_uv;
    float z_uv_1 = (id.z + 1) * inv_bin; z_uv_1 *= z_uv_1;

    float2x4 planes;
    planes[0] = GetPlane(-viewDir, lerp(cam, farPlane.xyz, z_uv));  // near
    planes[1] = GetPlane(viewDir, lerp(cam, farPlane.xyz, z_uv_1)); // far

    for (uint j = 0; j < lightCount; j++)
    {
        uint mask_active = mask_value;
        Light light = _LocalLightBuffer[_TileLights[start_offset + j] >> 24];
        if (light.radiance_type.w == POINT) { // point
            if (!SphereIntersect(light.position_range, planes)) mask_active = 0;
        }
        else { // spot
            if (!ConeIntersect(light.position_range, light.mainDirection_id.xyz, light.geometry.x, planes)) mask_active = 0;
        }
        uint mask = WaveActiveSum(mask_active);
        if (WaveIsFirstLane())
            _TileLights[start_offset + j] += mask;
    }
}