#pragma kernel Trace
#pragma kernel RemoveFlare
#pragma kernel TTFilter
#pragma kernel SFilter
#pragma kernel SFilterIndirect
#pragma kernel FinalSynthesis

#include "../Includes/GBuffer.hlsl"
#include "../Includes/PBS.hlsl"
#include "../Includes/RT/Include/Sampler.hlsl"

uint _Clock;
float4 _WH;
float4x4 _V, _V_Inv;
float4x4 _P, _P_Inv;
float4x4 _VP, _VP_Inv;

Texture2D<float> _HiZDepthTex;
Texture2D<float4> _SpecTex, _NormalTex, _AOTex, _SceneColor;
Texture2D<float4> _FilteredColor;
Texture2D<float2> _MotionTex;
TextureCube<float3> _SkyBox;

SamplerState point_clamp_sampler;
SamplerState linear_clamp_sampler;
SamplerState trilinear_clamp_sampler;

RWTexture2D<float4> _TempResult;

float max(float3 c) {
    return max(max(c.x, c.y), c.z);
}
float VD2PD(const float d) {
    return -(_P._m23 / d + _P._m22);
}
float PD2VD(const float d) {
     return -_P._m23 / (d + _P._m22);
}
float Vx2Px(const float2 xz) {
    return xz.x / xz.y * (_P._m00 / -2) + 0.5;
}
float Vy2Py(const float2 yz) {
    return yz.x / yz.y * (_P._m11 / -2) + 0.5;
}
float2 Vxy2Pxy(const float3 xyz) {
    return xyz.xy / xyz.z * (_P._m00_m11 / -2) + 0.5;
}
float DeltaDisX(const float3 vpos, const float3 vdir, const float vx) {
    float k = (vx - 0.5) / (_P._m00 / -2);
    return (k * vpos.z - vpos.x) / (vdir.x - k * vdir.z);
}
float DeltaDisY(const float3 vpos, const float3 vdir, const float vy) {
    float k = (vy - 0.5) / (_P._m11 / -2);
    return (k * vpos.z - vpos.y) / (vdir.y - k * vdir.z);
}

float Depth(float2 uv, uint level = 0) {
    return _HiZDepthTex.SampleLevel(point_clamp_sampler, uv, level);
}

float Luminance(float3 col) {
    return col.r * 0.299 + col.g * 0.587 + col.b * 0.114;
}
float3 ToneMap(float3 color) {
    return color / (1 + Luminance(color));
}
float3 UnToneMap(float3 color) {
    return color / (1 - Luminance(color));
}

uniform float2 pixel_size[7];
float2 pDir;
int2 dirSign;

float2 ToGridDis(const float2 uv, uint level) {
    float2 wh = pixel_size[level];
    float2 frac_dis = fmod(uv, wh);

    frac_dis = dirSign > 0 ? wh - frac_dis : frac_dis;
    return (frac_dis + wh * 0.5) / pDir;
}

[numthreads(8,8,1)]
void Trace(uint2 id : SV_DispatchThreadID)
{
    if (any(id >= uint2(_WH.xy))) return; // prevent illegal address access

    float2 uv = (id + 0.5f) * _WH.zw;

    float4 sceneColor = _SceneColor[id];

    pixel_size[0] = _WH.zw;
    [unroll]
    for (int i = 1; i < 7; i++)
    {
        uint2 wh; int levels;
        _HiZDepthTex.GetDimensions(i, wh.x, wh.y, levels);
        pixel_size[i] = 1.0f / wh;
    }

    int4 sampleState = int4(id, _Clock % 16, 0);

    float d = _HiZDepthTex[id];
    if (d == 0) {
        _TempResult[id] = -1;
        return;
    }

    float3 vpos;
    {
        float4 ndc = float4(uv * 2 - 1, d, 1);
        float4 viewPos = mul(_P_Inv, ndc);
        vpos = viewPos.xyz / viewPos.w;
    }
    float3 view = normalize(mul(float4(-vpos, 0), _V).xyz);

    SurfaceInfo info = (SurfaceInfo)0;
    info = DecodeGBuffer(0,
                            _SpecTex[id],
                            _NormalTex[id],
                            0,
                            1);

    float thickness = 1;
    uint start_level = info.smoothness > 0.4 ? 0 : 1;
    int max_loop = lerp(32, 96, info.smoothness);

    float dang = lerp(3, 1, info.smoothness < 0.9 ? info.smoothness : 1);

    float3 n = normalize(float3(0, 0, 0.5) + ImportanceSampleGGX(float2(SAMPLE, SAMPLE), (1 - info.smoothness) * (1 - info.smoothness)).xyz);

    n = mul(n, GetMatrixFromNormal(info.normal)).xyz;

    float3 vnormal = normalize(mul(float4(n, 0), _V_Inv).xyz);
    float3 vreflect = reflect(normalize(vpos), vnormal);
    float3 wreflect = normalize(mul(float4(vreflect, 0), _V).xyz);

    pDir = normalize(Vxy2Pxy(vpos + vreflect) - uv);
    dirSign = sign(pDir);
    pDir = abs(pDir);

    float3 vp = vpos + vnormal * 0.05 * (start_level + 1);
    float2 puv = Vxy2Pxy(vp);
    uint level = start_level;
    float lastD = 0;

    int loop_index = max_loop;
    while (loop_index-- > 0)
    {
        float v_dis;
        float2 p_delta_dis = ToGridDis(puv, level);
        if (p_delta_dis.x < p_delta_dis.y) {
            v_dis = DeltaDisX(vp, vreflect, puv.x + p_delta_dis.x * dirSign.x);
        }
        else {
            v_dis = DeltaDisY(vp, vreflect, puv.y + p_delta_dis.y * dirSign.y);
        }
        float3 dir = vreflect * v_dis;
        float3 newP = vp + dir;

        float vd = PD2VD(Depth(puv, level));
        bool hit = false;
        float deltaD = abs(vd - newP.z);
        if (newP.z < vd && (vd - newP.z) < thickness) {
            if (level == start_level) {
                //puv = Vxy2Pxy(vpos + (vd - vpos.z) / vreflect.z * vreflect);
                break;
            }
            level = max(level - 1, start_level);
        }
        else {
            vp = newP + dir * (deltaD > lastD ? dang : 0);
            lastD = deltaD;
            puv = Vxy2Pxy(vp);
            level = min(level + 1, start_level + 3);
        }

        if (vp.z >= 0 || any(puv < 0) || any(puv > 1)) {
            puv = -1;
            break;
        }
    }

    float3 l = 0;
    float dis = distance(vpos, vp);
    if (puv.x >= 0 && loop_index != -1)
    {
        float4 color = _FilteredColor.SampleLevel(trilinear_clamp_sampler, puv, lerp(7, 0, info.smoothness));
        l = color.xyz * (color.w != 0); // w for area light hit
    }
    else {
        l = _SkyBox.SampleLevel(trilinear_clamp_sampler, wreflect, lerp(7, 0, info.smoothness));
        dis = 10;
    }
    float3 res = PBS(PBS_SPECULAR, info, wreflect, l, view);

    _TempResult[id] = float4(ToneMap(res), min(10, dis));
}

Texture2D<float4> _History;
RWTexture2D<float4> _Result;


groupshared float4 buffer_0[10][10];
groupshared float4 buffer_1[10][10];
[numthreads(8, 8, 1)]
void RemoveFlare(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    // return;
    // Load current result to shared & perform a inital temporal.
    // This stage is to generate a more accurate buffer for the bbox calculation, which helps reduce flickering.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - 1;
        int loop_num = 100 / 64 + (100 % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < 100) {
                uint2 offset = uint2(task_id % 10, task_id / 10);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= uint2(_WH.xy))) {
                    buffer_0[offset.x][offset.y] = 0;
                    buffer_1[offset.x][offset.y] = 0;
                }
                else {
                    float2 prevUV = ((texID + 0.5) * _WH.zw - _MotionTex[texID]);

                    float4 newC = max(0, _TempResult[texID]);// prevent NaN
                    float4 hisC = max(0, _History.SampleLevel(linear_clamp_sampler, prevUV, 0));
                    float3 newN = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, prevUV, 0));
                    float3 hisN = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, prevUV, 0));
                    if (any(prevUV < 0) || any(prevUV > 1)) hisC = 0;

                    float mix_rate = (newC.w * hisC.w == 0) ? 0 : 0.2;
                    mix_rate *= dot(newN, hisN) > 0.9;
                    hisC *= mix_rate != 0;

                    buffer_0[offset.x][offset.y] = newC;
                    buffer_1[offset.x][offset.y] = lerp(newC, hisC, mix_rate);
                }
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    {
        uint2 bufferID = 1 + groupThreadID;

        float4 oc = buffer_0[bufferID.x][bufferID.y];
        float4 hc = buffer_1[bufferID.x][bufferID.y];
        float4 minC = hc, maxC = hc;

        float4 lc = buffer_1[bufferID.x - 1][bufferID.y];
        float4 dc = buffer_1[bufferID.x][bufferID.y - 1];
        float4 rc = buffer_1[bufferID.x + 1][bufferID.y];
        float4 uc = buffer_1[bufferID.x][bufferID.y + 1];

        // bbox
        maxC = max(minC, lc);
        minC = min(minC, lc);
        maxC = max(minC, dc);
        minC = min(minC, dc);
        maxC = max(minC, rc);
        minC = min(minC, rc);
        maxC = max(minC, uc);
        minC = min(minC, uc);

        // remove flare
        float maxL = max(max(Luminance(lc.xyz), Luminance(rc.xyz)), max(Luminance(dc.xyz), Luminance(uc.xyz)));
        float L = Luminance(oc.xyz);
        oc.xyz = L > maxL * 1.4 ? (lc.xyz + dc.xyz + rc.xyz + uc.xyz) / 4 : oc.xyz;

        _TempResult[id] = oc;
    }
}



[numthreads(8, 8, 1)]
void TTFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //_Result[id] = _TempResult[id]; return;
    float smooth = 1 - _SpecTex[id].w; smooth *= smooth * smooth;

    // Load current result to shared & perform a inital temporal.
    // This stage is to generate a more accurate buffer for the bbox calculation, which helps reduce flickering.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - 1;
        int loop_num = 100 / 64 + (100 % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < 100) {
                uint2 offset = uint2(task_id % 10, task_id / 10);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= uint2(_WH.xy))) {
                    buffer_0[offset.x][offset.y] = 0;
                    buffer_1[offset.x][offset.y] = 0;
                }
                else {
                    float2 uv = (texID + 0.5) * _WH.zw;
                    float2 motion = _MotionTex[texID];
                    float2 prevUV = uv - motion;

                    float4 newC = max(0, _TempResult[texID]);// prevent NaN
                    float4 hisC = max(0, _History.SampleLevel(linear_clamp_sampler, prevUV, 0));
                    float3 newN = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, uv, 0));
                    float3 hisN = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, prevUV, 0));
                    if (any(prevUV < 0) || any(prevUV > 1)) hisC = 0;

                    float mix_rate = (newC.w * hisC.w == 0) ? 0 : lerp(1, 0.4, smooth);
                    mix_rate *= dot(newN, hisN) > 0.9;
                    hisC *= mix_rate != 0;

                    buffer_0[offset.x][offset.y] = newC;
                    buffer_1[offset.x][offset.y] = lerp(newC, hisC, mix_rate);
                }
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }
    
    // perform temporal
    {
        uint2 bufferID = 1 + groupThreadID;

        float4 oc = buffer_0[bufferID.x][bufferID.y];
        float4 hc = buffer_1[bufferID.x][bufferID.y];
        float4 minC = oc, maxC = oc;

        float4 lc = buffer_0[bufferID.x - 1][bufferID.y];
        float4 dc = buffer_0[bufferID.x][bufferID.y - 1];
        float4 rc = buffer_0[bufferID.x + 1][bufferID.y];
        float4 uc = buffer_0[bufferID.x][bufferID.y + 1];

        // bbox
        maxC = max(minC, lc);
        minC = min(minC, lc);
        maxC = max(minC, dc);
        minC = min(minC, dc);
        maxC = max(minC, rc);
        minC = min(minC, rc);
        maxC = max(minC, uc);
        minC = min(minC, uc);

        float mix_rate = (oc.w * hc.w == 0) ? 0 : lerp(0.95, 0.9, smooth);
        mix_rate *= max(0, 1 - length(_MotionTex[id]) * 100);
        hc = clamp(hc, minC - 0.5, maxC + 0.5);
        float4 mixed = lerp(oc, hc, mix_rate);
        _Result[id] = mixed;
    }
}

float2 _SmoothRange;

#define SPATIAL_RADIUS 3
#define GROUPSHARED_SIZE (8 + SPATIAL_RADIUS * 2)
#define GROUPSHARED_COUNT (GROUPSHARED_SIZE * GROUPSHARED_SIZE)
groupshared float4 buffer2_0[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared float4 buffer2_1[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared float3 buffer2_2[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared bool active;

RWStructuredBuffer<int> _Indirect;
StructuredBuffer<uint> _Block;
RWStructuredBuffer<uint> _NextBlock;

void SFilter_(uint2 id, uint2 groupThreadID, uint2 groupID) {
    //return;
    float4 data = _SpecTex[id];
    float smooth = max(saturate(1 - _Result[id].w / 10), (1 - data.w));

    // load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - SPATIAL_RADIUS;
        int loop_num = GROUPSHARED_COUNT / 64 + (GROUPSHARED_COUNT % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < GROUPSHARED_COUNT) {
                uint2 offset = uint2(task_id % GROUPSHARED_SIZE, task_id / GROUPSHARED_SIZE);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= uint2(_WH.xy))) {
                    buffer2_0[offset.x][offset.y] = 0;
                    buffer2_1[offset.x][offset.y] = 0;
                    buffer2_2[offset.x][offset.y] = -1;                    
                }
                else {
                    float4 newC = _Result[texID];
                    float4 n_m = _NormalTex[texID];
                    float3 normal = DecodeNormal(n_m.xyz);
                    buffer2_0[offset.x][offset.y] = newC;
                    buffer2_1[offset.x][offset.y] = float4(normal, PD2VD(_HiZDepthTex[texID]));
                    buffer2_2[offset.x][offset.y] = _SpecTex[texID].xyz;
                }
            }
        }
        if (all(groupThreadID == 0)) active = false;
        GroupMemoryBarrierWithGroupSync();
    }

    [branch]
    if (smooth < _SmoothRange.y) {

        //_Result[id] = _Result[id] + 0.1;return;
        //need lager filter
        if (smooth < _SmoothRange.x)
            active = true;

        smooth = saturate((smooth - _SmoothRange.x) / (_SmoothRange.y - _SmoothRange.x));

        //_Result[id] = _Result[id] + 0.1;
        // spatial filter
        {
            float4 res = 0;
            float w = 0;
            int2 baseID = groupThreadID + SPATIAL_RADIUS;
            float4 cn_cd = buffer2_1[baseID.x][baseID.y];
            float3 cc = buffer2_2[baseID.x][baseID.y];
            for (int i = -SPATIAL_RADIUS; i <= SPATIAL_RADIUS; i++)
            {
                for (int j = -SPATIAL_RADIUS; j <= SPATIAL_RADIUS; j++)
                {
                    float weight = exp(-10 * smooth * abs((float)(i * j) / (SPATIAL_RADIUS * SPATIAL_RADIUS)));
                    int2 id_in_shared = int2(baseID.x + i, baseID.y + j);
                    float4 n_d = buffer2_1[id_in_shared.x][id_in_shared.y];
                    float3 normal = n_d.xyz;
                    float4 l = buffer2_0[id_in_shared.x][id_in_shared.y];
                    float3 cd = cc - buffer2_2[id_in_shared.x][id_in_shared.y];
                    cd *= sqrt(float3(3, 4, 2));
                    weight *= max(0, 1 - dot(cd, cd) * 10);
                    weight *= (l.w >= 0) * smoothstep(0.999, 1, dot(cn_cd.xyz, normal)) * max(0, 1 - abs(cn_cd.w - n_d.w));
                    w += weight;
                    res += l * weight;
                }
            }

            float4 spec = w > 0 ? res / w : -1;
            _Result[id] = spec;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (all(groupThreadID == 0)) {
        if (active) {
            uint index;
            InterlockedAdd(_Indirect[0], 1, index);
            _NextBlock[index] = (groupID.x << 16) + groupID.y;
        }
    }
}



[numthreads(8, 8, 1)]
void SFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    SFilter_(id, groupThreadID, groupID);
}


[numthreads(8, 8, 1)]
void SFilterIndirect(uint2 groupThreadID : SV_GroupThreadID, uint groupID : SV_GroupID)
{
    uint blockData = _Block[groupID];
    uint2 blockID = uint2(blockData>>16, blockData & 0xFFFF);
    //blockID = uint2(groupID % 1920, groupID / 1920);
    uint2 actual_groupID = blockID;
    uint2 id = groupThreadID + actual_groupID * 8;

    SFilter_(id, groupThreadID, actual_groupID);
}


[numthreads(8, 8, 1)]
void FinalSynthesis(uint2 id : SV_DispatchThreadID)
{
    //_Result[id] = _Result[id].w / 10;
    //return;
    float4 aoData = _AOTex[id];
    float3 gN = DecodeNormal(aoData.xyz);
    float3 n = DecodeNormal(_NormalTex[id].xyz);
    float ao = aoData.w;

    float3 view;
    {
        float4 ndc = float4((id + 0.5) * _WH.zw * 2 - 1, 0, 1);
        float4 viewPos = mul(_VP_Inv, ndc);
        view = normalize(_V_Inv._m03_m13_m23 - viewPos.xyz / viewPos.w);
    }

    float specAO = CalculateSpecAO(ao, _SpecTex[id].w, view, gN);

    float4 sceneColor = _SceneColor[id];
    sceneColor.a = sceneColor.a != 0;
    _Result[id] = sceneColor + sceneColor.a * specAO * float4(UnToneMap(_Result[id].xyz), 0);
}