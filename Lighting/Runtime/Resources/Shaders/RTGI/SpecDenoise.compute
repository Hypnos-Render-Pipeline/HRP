#pragma kernel DownSampleDepth
#pragma kernel TTFilter
#pragma kernel SFilter
#pragma kernel SFilterIndirect
#pragma kernel UpSample 
#pragma kernel FinalSynthesis

#include "../Includes/GBuffer.hlsl"
#include "../Includes/PBS.hlsl"
#include "../Includes/RT/Include/Sampler.hlsl"

uint _Clock;
float4 _WH;
float4x4 _V, _V_Inv;
float4x4 _P, _P_Inv;
float4x4 _VP, _VP_Inv;
float4x4 _Last_VP, _Last_VP_Inv;

Texture2D<float4> _SpecTex, _NormalTex, _AOTex, _SceneColor, _HistoryNormal;
Texture2D<float4> _FilteredColor;
Texture2D<float2> _MotionTex;
Texture2D<float> _DepthTex, _HistoryDepth;
Texture2D<float4> _History;
TextureCube<float3> _SkyBox;

SamplerState point_clamp_sampler;
SamplerState linear_clamp_sampler;
SamplerState trilinear_clamp_sampler;

RWTexture2D<float> _HalfIndexTex;
RWTexture2D<float4> _TempResult;
RWTexture2D<float4> _FullSizeResult;
RWTexture2D<float4> _Result;
RWTexture2D<float2> _Variance;



float PD2VD(const float d) {
    return -_P._m23 / (d + _P._m22);
}
float max(float3 c) {
    return max(max(c.x, c.y), c.z);
}
float Luminance(float3 col) {
    return col.r * 0.299 + col.g * 0.587 + col.b * 0.114;
}
float3 ToneMap(float3 color) {
    return color / (1 + Luminance(color));
}
float3 UnToneMap(float3 color) {
    return color / (1 - Luminance(color));
}

int offset2index(const uint2 offset) {
    int2x2 offset2index = int2x2(0, 3, 1, 2);
    return offset2index[offset.x][offset.y];
}
int2 index2offset(const uint index) {
    uint2 index2offset[4] = { uint2(0, 0), uint2(1, 0), uint2(1, 1), uint2(0, 1) };
    return index2offset[index];
}

float4 min_max_d_index(const float4 d) {
    float min_d = min(d.x, min(d.y, min(d.z, d.w)));
    float max_d = max(d.x, max(d.y, max(d.z, d.w)));

    float4 index_caster = float4(0, 1, 2, 3);

    int4 index_v = d == min_d;
    int picked_index_min = index_v.x ? 0 : (index_v.y ? 1 : index_v.z ? 2 : 3);
    index_v = d == max_d;
    int picked_index_max = index_v.x ? 0 : (index_v.y ? 1 : index_v.z ? 2 : 3);

    return float4(min_d, max_d, picked_index_min, picked_index_max);
}

uint2 half2FullIndex(uint2 halfIndex) {
    int index = _HalfIndexTex[halfIndex];
    uint2 fullResIndex = halfIndex * 2 + index2offset(index);
    return fullResIndex;
}

[numthreads(8, 8, 1)]
void DownSampleDepth(const uint2 id : SV_DispatchThreadID)
{
    uint2 wh;
    _HalfIndexTex.GetDimensions(wh.x, wh.y);
    if (any(id >= wh)) return;


    float2 uv = (id * 2 + 0.5) * _WH.zw;

    float4 d = _DepthTex.GatherRed(point_clamp_sampler, uv);

    int checkboard = (id.x % 2 + id.y/* + _Clock*/) % 2;

    float4 min_d_max_d_index = min_max_d_index(d);
    _HalfIndexTex[id] = checkboard ? min_d_max_d_index.z : min_d_max_d_index.w;
}




groupshared float4 buffer_0[10][10];
groupshared float4 buffer_1[10][10];
[numthreads(8, 8, 1)]
void TTFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //_Result[id] = _TempResult[id]; return;

    float2 fullres_id = half2FullIndex(id);
    float smooth = 1 - _SpecTex[fullres_id].w; //smooth *= smooth * smooth;

    // Load current result to shared & perform a inital temporal.
    // This stage is to generate a more accurate buffer for the bbox calculation, which helps reduce flickering.
    {
        uint2 wh;
        _HalfIndexTex.GetDimensions(wh.x, wh.y);

        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - 1;
        int loop_num = 100 / 64 + (100 % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < 100) {
                uint2 offset = uint2(task_id % 10, task_id / 10);
                uint2 texID = lbID + offset;
                uint2 fullres_texID = half2FullIndex(texID);
                float4 newC = max(0, _TempResult[texID]);// prevent NaN
                if (any(fullres_texID < 0) || any(fullres_texID >= uint2(_WH.xy))) {
                    buffer_0[offset.x][offset.y] = newC;
                    buffer_1[offset.x][offset.y] = 0;
                }
                else {
                    float2 uv = (fullres_texID + 0.5) * _WH.zw;
                    float2 motion = _MotionTex[fullres_texID];
                    float2 prevUV = uv - motion;

                    float4 hisC = max(0, _History.SampleLevel(linear_clamp_sampler, prevUV, 0));

                    float mix_rate = (newC.w * hisC.w < 0) ? 0 : lerp(0.2, 0, smooth);

                    buffer_0[offset.x][offset.y] = lerp(newC, hisC, mix_rate);
                    buffer_1[offset.x][offset.y] = float4(DecodeNormal(_AOTex[fullres_texID].xyz), 1);
                }
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // perform temporal
    {
        uint2 bufferID = 1 + groupThreadID;

        float4 oc = buffer_0[bufferID.x][bufferID.y];

        float4 minC = oc, maxC = oc;

        float4 lc = buffer_0[bufferID.x - 1][bufferID.y];
        float4 dc = buffer_0[bufferID.x][bufferID.y - 1];
        float4 rc = buffer_0[bufferID.x + 1][bufferID.y];
        float4 uc = buffer_0[bufferID.x][bufferID.y + 1];

        // bbox
        maxC = max(minC, lc);
        minC = min(minC, lc);
        maxC = max(minC, dc);
        minC = min(minC, dc);
        maxC = max(minC, rc);
        minC = min(minC, rc);
        maxC = max(minC, uc);
        minC = min(minC, uc);

        float av_dis = (lc.w + dc.w + rc.w + uc.w + oc.w) / 5;

        float3 av_n = (buffer_1[bufferID.x][bufferID.y] +
            buffer_1[bufferID.x - 1][bufferID.y] + buffer_1[bufferID.x + 1][bufferID.y] +
            buffer_1[bufferID.x][bufferID.y - 1] + buffer_1[bufferID.x][bufferID.y + 1]).xyz;

        float3 camPos = _V_Inv._m03_m13_m23;

        float2 uv = (fullres_id + 0.5) * _WH.zw;
        float3 newN = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, uv, 0).xyz);
        float d = _DepthTex.SampleLevel(point_clamp_sampler, uv, 0).x;

        float3 wpos;
        {
            float4 ndc = float4(uv * 2 - 1, d, 1);
            float4 worldPos = mul(_VP_Inv, ndc);
            wpos = worldPos.xyz / worldPos.w;
        }
        float2 prevUV;
        {
            float3 ref_wpos = wpos;
            ref_wpos += normalize(ref_wpos - camPos) * lerp(av_dis, 0, min(1, (1 - length(av_n) / 5) * 100000));
            float4 lvpoint = mul(_Last_VP, float4(ref_wpos, 1));
            lvpoint /= lvpoint.w;
            lvpoint = (lvpoint + 1) * 0.5;
            prevUV = lvpoint.xy;
        }
        float hd = _HistoryDepth.SampleLevel(point_clamp_sampler, prevUV, 0).x;
        float3 hisN = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, prevUV, 0).xyz);
        float3 hwpos;
        {
            float4 ndc = float4(prevUV * 2 - 1, hd, 1);
            float4 worldPos = mul(_Last_VP_Inv, ndc);
            hwpos = worldPos.xyz / worldPos.w;
        }

        float weight = smoothstep(0.2, 0.5, dot(newN, hisN)) * max(0, 1 - distance(wpos, hwpos));
        if (any(prevUV < 0) || any(prevUV > 1)) weight = 0;

        float4 hc = _History.SampleLevel(linear_clamp_sampler, prevUV, 0);

        float mix_rate = (oc.w * hc.w == 0) ? 0 : lerp(0.95, 0.8, smooth * smooth * smooth);
        mix_rate *= lerp(mix_rate, mix_rate - 0.5, min(1, length(_MotionTex[id]) * 10)) * weight;
        hc = clamp(hc, minC - 0.5, maxC + 0.5);
        float4 mixed = lerp(oc, hc, mix_rate);
        _Result[id] = mixed;
    }
}

float2 _ProcessRange;

#define SPATIAL_RADIUS 3
#define GROUPSHARED_SIZE (8 + SPATIAL_RADIUS * 2)
#define GROUPSHARED_COUNT (GROUPSHARED_SIZE * GROUPSHARED_SIZE)
groupshared float4 buffer2_0[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared float4 buffer2_1[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared bool active;

RWStructuredBuffer<int> _Indirect;
StructuredBuffer<uint> _Block;
RWStructuredBuffer<uint> _NextBlock;

void SFilter_(uint2 id, uint2 groupThreadID, uint2 groupID, bool var = false) {
    //return;

    uint2 fullResIndex = half2FullIndex(id);
    float4 data = _SpecTex[fullResIndex];
    float max_l = max(data.xyz);
    float smooth = max(1 - max_l * 3, max(saturate(1 - _Result[id].w / 10), (1 - data.w)));

    // load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - SPATIAL_RADIUS;
        int loop_num = GROUPSHARED_COUNT / 64 + (GROUPSHARED_COUNT % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < GROUPSHARED_COUNT) {
                uint2 offset = uint2(task_id % GROUPSHARED_SIZE, task_id / GROUPSHARED_SIZE);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= uint2(_WH.xy))) {
                    buffer2_0[offset.x][offset.y] = 0;
                    buffer2_1[offset.x][offset.y] = 0;
                }
                else {
                    float4 newC = _Result[texID];
                    texID = half2FullIndex(texID);
                    float4 n_m = _NormalTex[texID];
                    float3 normal = DecodeNormal(n_m.xyz);
                    buffer2_0[offset.x][offset.y] = newC;
                    buffer2_1[offset.x][offset.y] = float4(normal, PD2VD(_DepthTex[texID]));
                }
            }
        }
        if (all(groupThreadID == 0)) active = false;
        GroupMemoryBarrierWithGroupSync();
    }

    [branch]
    if (smooth < _ProcessRange.y) {

        //_Result[id] = _Result[id] + 0.1;return;
        //need lager filter
        if (smooth < _ProcessRange.x)
            active = true;

        smooth = saturate((smooth - _ProcessRange.x) / (_ProcessRange.y - _ProcessRange.x));

        //_Result[id] = _Result[id] + 0.1;
        // spatial filter
        {
            float4 res = 0;
            float w = 0;
            int2 baseID = groupThreadID + SPATIAL_RADIUS;
            float crd = buffer2_0[baseID.x][baseID.y].w;
            float4 cn_cd = buffer2_1[baseID.x][baseID.y];
            for (int i = -SPATIAL_RADIUS; i <= SPATIAL_RADIUS; i++)
            {
                for (int j = -SPATIAL_RADIUS; j <= SPATIAL_RADIUS; j++)
                {
                    float weight = exp(-10 * smooth * abs((float)(i * j) / (SPATIAL_RADIUS * SPATIAL_RADIUS)));
                    int2 id_in_shared = int2(baseID.x + i, baseID.y + j);
                    float4 n_d = buffer2_1[id_in_shared.x][id_in_shared.y];
                    float3 normal = n_d.xyz;
                    float4 l = buffer2_0[id_in_shared.x][id_in_shared.y];
                    weight *= (l.w >= 0) * smoothstep(0.997, 1, dot(cn_cd.xyz, normal)) * max(0, 1 - abs(cn_cd.w - n_d.w));
                    weight *= clamp(1 - abs(crd - l.w), 0.2, 1);
                    w += weight;
                    res += l * weight;
                }
            }

            float4 spec = w > 0 ? res / w : -1;
            _Result[id] = spec;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (all(groupThreadID == 0)) {
        if (active) {
            uint index;
            InterlockedAdd(_Indirect[0], 1, index);
            _NextBlock[index] = (groupID.x << 16) + groupID.y;
        }
    }
}



[numthreads(8, 8, 1)]
void SFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //return;
    SFilter_(id, groupThreadID, groupID);
}

[numthreads(8, 8, 1)]
void SFilterIndirect(uint2 groupThreadID : SV_GroupThreadID, uint groupID : SV_GroupID)
{
    //return;
    uint blockData = _Block[groupID];
    uint2 blockID = uint2(blockData >> 16, blockData & 0xFFFF);
    uint2 actual_groupID = blockID;
    uint2 id = groupThreadID + actual_groupID * 8;

    SFilter_(id, groupThreadID, actual_groupID, true);
}


groupshared float4 buffer3_0[6][6];
groupshared float4 buffer3_1[6][6];
[numthreads(8, 8, 1)]
void UpSample(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //_FullSizeResult[id] = _Result[id / 2]; return;
    // load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 4 - 1;

        if (thread_id < 36) {
            uint2 wh;
            _HalfIndexTex.GetDimensions(wh.x, wh.y);

            uint2 offset = uint2(thread_id % 6, thread_id / 6);
            uint2 texID = lbID + offset;
            if (any(texID < 0) || any(texID >= wh)) {
                buffer3_0[offset.x][offset.y] = 0;
                buffer3_1[offset.x][offset.y] = 0;
            }
            else {
                float4 c = _Result[texID];
                texID = half2FullIndex(texID);
                float3 normal = DecodeNormal(_NormalTex[texID].xyz);
                float d = _DepthTex[texID];
                buffer3_0[offset.x][offset.y] = c;
                buffer3_1[offset.x][offset.y] = float4(normal, PD2VD(d));
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    if (_SceneColor[id].a == 0) {
        _FullSizeResult[id] = 0;
        return;
    }

    float4 res = 0;
    float w = 0;
    int2 baseID = floor(groupThreadID - 0.9) / 2 + 1;
    float3 cn = DecodeNormal(_NormalTex[id].xyz);
    float cd = PD2VD(_DepthTex[id]);
    for (int i = 0; i <= 1; i++)
    {
        for (int j = 0; j <= 1; j++)
        {
            int2 texID = baseID + int2(i, j);

            float4 nd = buffer3_1[texID.x][texID.y];

            float depth_weight = max(0, 0.2 - abs(nd.w - cd)) + 0.1;
            float normal_weight = smoothstep(0, 1, dot(cn, nd.xyz)) + 0.1;

            float4 c = buffer3_0[texID.x][texID.y];
            float weight = (c.w >= 0) * normal_weight * depth_weight;
            res += c * weight;
            w += weight;
        }
    }

    _FullSizeResult[id] = w == 0 ? 0 : res / w;
}


[numthreads(8, 8, 1)]
void FinalSynthesis(uint2 id : SV_DispatchThreadID)
{
    //_Result[id] = _History[id].w/100;
    //_Result[id] = _History[id];
    //return;
    float4 aoData = _AOTex[id];
    float3 gN = DecodeNormal(aoData.xyz);
    float3 n = DecodeNormal(_NormalTex[id].xyz);
    float ao = aoData.w;

    float3 view;
    {
        float4 ndc = float4((id + 0.5) * _WH.zw * 2 - 1, 0, 1);
        float4 viewPos = mul(_VP_Inv, ndc);
        view = normalize(_V_Inv._m03_m13_m23 - viewPos.xyz / viewPos.w);
    }

    view += max(0, 0.1 - dot(n, view)) * n;

    float4 spec_r = _SpecTex[id];
    float specAO = CalculateSpecAO(ao, spec_r.w, view, gN);

    float4 sceneColor = _SceneColor[id];
    sceneColor.a = sceneColor.a != 0;

    _Result[id] = sceneColor + sceneColor.a * specAO * float4(spec_r.xyz * UnToneMap(_History[id].xyz), 0);
}