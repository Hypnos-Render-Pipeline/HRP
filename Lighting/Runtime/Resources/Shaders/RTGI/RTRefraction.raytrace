RWTexture2D<float4> RenderTarget;

#pragma max_recursion_depth 1

#include "../Includes/RT/Include/RayTracingCommon.hlsl"
#include "../Includes/RT/Include/TraceRay.hlsl"
#include "../Includes/Light.hlsl"
#include "../Includes/GBuffer.hlsl"
#include "../Includes/PBS.hlsl"
#include "../Includes/Atmo/Sun.hlsl"

float4x4 _VP_Inv, _VP, _V, _P;
int _Clock;

int _MaxDepth;
int _UseRTShadow;

float4 _WH;

Texture2D<float> _DepthTex;
Texture2D<float4> _BaseColorTex, _NormalTex, _AOTex, _SceneColor;
Texture2D<float> _IndexTex;
Texture2D<float2> _MotionTex;
TextureCube<float3> _SkyBox;

SamplerState linear_clamp_sampler;

RWTexture2D<float4> _TempResult;

float PD2VD(const float d) {
     return -_P._m23 / (d + _P._m22);
}


float3 L(GBuffer_RTGI gbuffer, float3 hitPos, float3 dir, inout int4 sampleState, bool shadow = false, float dis = 1) {
    float3 res = 0;

    if (gbuffer.miss) {
        res += _SkyBox.SampleLevel(linear_clamp_sampler, dir, 0);
    }
    else {
        res = gbuffer.emission;

        float4 ppos = mul(_VP, float4(hitPos, 1));

        SurfaceInfo hitInfo = (SurfaceInfo)0;
        hitInfo.diffuse = gbuffer.albedo;
        hitInfo.smoothness = gbuffer.smoothness;
        float3 metallic = gbuffer.metallic;
        hitInfo.gnormal = hitInfo.normal = gbuffer.normal;
        hitInfo.transparent = gbuffer.transparent;
        hitInfo.diffuseAO_specAO = 1;
        hitInfo.diffuse = DiffuseAndSpecularFromMetallic(hitInfo.diffuse, metallic, /*out*/ hitInfo.specular);
        
        float3 hitView = -dir;
                
        float2 uv = ppos.xy / ppos.w;
        uv = (uv + 1) * 0.5;
        bool offscreen = any(uv < 0) || any(uv > 1);

        [branch]
        if (offscreen) {   
            BegineAllLocalLightsLoop(uv, hitPos, _VP_Inv);
            {
                sampleState.w = 0;
                float3 lres = PBS(PBS_FULLY, hitInfo, light.dir, light.radiance, hitView);
                [branch]
                if (shadow && any(lres > 0)) {
                    lres *= TraceShadow_RTGI(hitPos, light.end);
                }
                res += lres;
            }
            EndAllLocalLightsLoop;  
        }
        else{
            if (abs(mul(_V, float4(hitPos, 1)).z - PD2VD(_DepthTex[uv * _WH.xy])) < 0.1) {                
                return _SceneColor.SampleLevel(linear_clamp_sampler, uv, 0);
            }
            BegineLocalLightsLoop(uv, hitPos, _VP_Inv); // use zbin to cull light.
            {
                sampleState.w = 0;
                float3 lres = PBS(PBS_FULLY, hitInfo, light.dir, light.radiance, hitView);
                [branch]
                if (shadow && any(lres > 0)) {
                    lres *=  TraceShadow_RTGI(hitPos, light.end);
                }
                res += lres;
            }
            EndLocalLightsLoop;
        }
	    BegineDirectionalLightsLoop(hitPos);
	    {
	        sampleState.w = 0;
	        float3 lres = PBS(PBS_FULLY, hitInfo, light.dir, light.radiance, hitView);
	        [branch]
	        if (shadow && any(lres > 0)) {
	            res += lres * TraceShadow_RTGI(hitPos, light.end + UniformSampleSphere(float2(SAMPLE, SAMPLE)) * 0.01 * 9999);
	        }
            res += lres;
	    }
	    EndDirectionalLightsLoop;
    

        float3 sl = PBS(PBS_FULLY, hitInfo, sunDir, sunColor, hitView);
        if (shadow && any(sl > 0)) {
            sl *= TraceShadow_RTGI(hitPos, hitPos + sunDir * 9999 + UniformSampleSphere(float2(SAMPLE, SAMPLE)) * 9999 * sin(sunAngle));
        }
        res += sl;
        
        // trick skybox ibl, remove in future.
        res += saturate(dis) * PBS(PBS_FULLY, hitInfo, hitInfo.normal, _SkyBox.SampleLevel(linear_clamp_sampler, hitInfo.normal, 6), hitView) * 3.14 / 2;
    }
    return res;
}

[shader("raygeneration")]
void Refraction()
{

    uint2 dispatchIdx = DispatchRaysIndex().xy;

    float2 uv = (dispatchIdx + 0.5) * _WH.zw;

    float d = _DepthTex[dispatchIdx];
    float4 baseColor_Trans = _BaseColorTex[dispatchIdx];
    if (d == 0 || baseColor_Trans.w == 0) {
        _TempResult[dispatchIdx] = _SceneColor[dispatchIdx];
        return;
    }

    
    float3 camPos = _V_Inv._m03_m13_m23;
    float3 pos; 
    {
        float4 ndc = float4(uv * 2 - 1, d, 1);
        float4 worldPos = mul(_VP_Inv, ndc);
        pos = worldPos.xyz / worldPos.w;
    }
    float3 view = normalize(camPos - pos);
    pos -= view * 0.001;

    SurfaceInfo info = (SurfaceInfo)0;
    info = DecodeGBuffer(baseColor_Trans,
                            0,
                            _NormalTex[dispatchIdx],
                            0,
                            _AOTex[dispatchIdx],
                            _IndexTex[dispatchIdx]);
    pos -= info.gnormal * lerp(0.02, 0.01, dot(view, info.gnormal));

	int4 sampleState = int4(dispatchIdx, _Clock % 32, 0);

    float3 n = ImportanceSampleGGX(float2(SAMPLE, SAMPLE), (1 - info.smoothness));
    n = mul(n, GetMatrixFromNormal(info.normal)).xyz;
    

    float IOR = (1.0f / info.index);
	float3 next_dir = refract(-view, n, IOR);
    
    float t = 0;
    GBuffer_RTGI gbuffer = TraceNext_RTGI(pos, next_dir);
    pos += next_dir * gbuffer.dis;

    t += gbuffer.dis;
    float3 weight = (1 - PhysicsFresnel(info.index, view, info.normal));
    int max_depth = _MaxDepth;
    float last_dis = 1;
    while (!gbuffer.miss && gbuffer.transparent != 0 && --max_depth) {
        if (!gbuffer.front)
            weight *= pow(max(0.01, gbuffer.albedo * gbuffer.transparent), gbuffer.dis);

        float3 viewDir = -next_dir;
        float3 n = ImportanceSampleGGX(float2(SAMPLE, SAMPLE), (1 - gbuffer.smoothness));
        n = mul(n, GetMatrixFromNormal(gbuffer.normal)).xyz;
    
        
        IOR = gbuffer.front ? (1.0f / gbuffer.index) : gbuffer.index;
	    next_dir = refract(-viewDir, n, IOR);
	    bool all_reflect = length(next_dir) < 0.5;
    
        float r_thre = gbuffer.front ? 0 : PhysicsFresnel(1.0 / IOR, viewDir, gbuffer.normal);
	    if (all_reflect) {
		    next_dir = reflect(-viewDir, n);
	    }

        gbuffer = TraceNext_RTGI(pos, next_dir);
        last_dis = gbuffer.dis;
        pos += next_dir * gbuffer.dis;
        t += gbuffer.miss ? 0 : gbuffer.dis;
    }

    float3 res = L(gbuffer, pos, next_dir, sampleState, _UseRTShadow, last_dis);

    _TempResult[dispatchIdx] = _SceneColor[dispatchIdx] + float4(res * weight, 0);
    return;
}
