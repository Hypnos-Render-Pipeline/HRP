#pragma kernel DownSampleDepth
#pragma kernel TTFilter
#pragma kernel SFilter
#pragma kernel SFilterIndirect
#pragma kernel UpSample 
#pragma kernel FinalSynthesis
#pragma kernel Subtract

#include "../Includes/GBuffer.hlsl"
#include "../Includes/PBS.hlsl"
#include "../Includes/RT/Include/Sampler.hlsl"

uint _Clock;
float4 _WH;
float4x4 _V, _V_Inv;
float4x4 _P, _P_Inv;
float4x4 _VP, _VP_Inv;
float4x4 _Last_VP_Inv;

Texture2D<float4> _BaseColorTex, _NormalTex, _SceneColor, _HistoryNormal;
Texture2D<float4> _FilteredColor;
Texture2D<float2> _MotionTex;
Texture2D<float> _DepthTex, _HistoryDepth;
Texture2D<float4> _History;
TextureCube<float3> _SkyBox;

SamplerState point_clamp_sampler;
SamplerState linear_clamp_sampler;
SamplerState trilinear_clamp_sampler;

RWTexture2D<float> _HalfIndexTex;
RWTexture2D<float4> _TempResult;
RWTexture2D<float4> _FullSizeResult;
RWTexture2D<float4> _Result;
RWTexture2D<float2> _Variance;



float PD2VD(const float d) {
    return -_P._m23 / (d + _P._m22);
}
float max(float3 c) {
    return max(max(c.x, c.y), c.z);
}
float Luminance(float3 col) {
    return col.r * 0.299 + col.g * 0.587 + col.b * 0.114;
}
float3 UnToneMap(float3 color) {
    return (6 * color) / (1 - color);// color / (0.1 + color);
}

int offset2index(const uint2 offset) {
    int2x2 offset2index = int2x2(0, 3, 1, 2);
    return offset2index[offset.x][offset.y];
}
int2 index2offset(const uint index) {
    uint2 index2offset[4] = { uint2(0, 0), uint2(1, 0), uint2(1, 1), uint2(0, 1) };
    return index2offset[index];
}

float4 min_max_d_index(const float4 d) {
    float min_d = min(d.x, min(d.y, min(d.z, d.w)));
    float max_d = max(d.x, max(d.y, max(d.z, d.w)));

    float4 index_caster = float4(0, 1, 2, 3);

    int4 index_v = d == min_d;
    int picked_index_min = index_v.x ? 0 : (index_v.y ? 1 : index_v.z ? 2 : 3);
    index_v = d == max_d;
    int picked_index_max = index_v.x ? 0 : (index_v.y ? 1 : index_v.z ? 2 : 3);

    return float4(min_d, max_d, picked_index_min, picked_index_max);
}

uint2 half2FullIndex(uint2 halfIndex) {
    int index = _HalfIndexTex[halfIndex];
    uint2 fullResIndex = halfIndex * 2 + index2offset(index);
    return fullResIndex;
}

[numthreads(8, 8, 1)]
void DownSampleDepth(const uint2 id : SV_DispatchThreadID)
{
    uint2 wh;
    _HalfIndexTex.GetDimensions(wh.x, wh.y);
    if (any(id >= wh)) return;


    float2 uv = (id * 2 + 0.5) * _WH.zw;

    float4 d = _DepthTex.GatherRed(point_clamp_sampler, uv);

    int checkboard = (id.x % 2 + id.y/* + _Clock*/) % 2;

    float4 min_d_max_d_index = min_max_d_index(d);
    _HalfIndexTex[id] = checkboard ? min_d_max_d_index.z : min_d_max_d_index.w;
}




groupshared float4 buffer_0[10][10];

[numthreads(8, 8, 1)]
void TTFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //_Result[id] = _TempResult[id]; return;
    // Load current result to shared.
    {
        uint2 wh;
        _HalfIndexTex.GetDimensions(wh.x, wh.y);

        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - 1;
        int loop_num = 100 / 64 + (100 % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < 100) {
                uint2 offset = uint2(task_id % 10, task_id / 10);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= wh)) {
                    buffer_0[offset.x][offset.y] = 0;
                }
                else {
                    buffer_0[offset.x][offset.y] = _TempResult[texID];
                }
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // perform temporal
    {
        uint2 bufferID = 1 + groupThreadID;

        float4 oc = buffer_0[bufferID.x][bufferID.y];

        float4 minC = oc, maxC = oc;

        float4 lc = buffer_0[bufferID.x - 1][bufferID.y];
        float4 dc = buffer_0[bufferID.x][bufferID.y - 1];
        float4 rc = buffer_0[bufferID.x + 1][bufferID.y];
        float4 uc = buffer_0[bufferID.x][bufferID.y + 1];
        float4 ld = buffer_0[bufferID.x - 1][bufferID.y - 1];
        float4 lu = buffer_0[bufferID.x - 1][bufferID.y + 1];
        float4 rd = buffer_0[bufferID.x + 1][bufferID.y - 1];
        float4 ru = buffer_0[bufferID.x + 1][bufferID.y + 1];

        // bbox
        maxC = max(minC, lc);
        minC = min(minC, lc);
        maxC = max(minC, dc);
        minC = min(minC, dc);
        maxC = max(minC, rc);
        minC = min(minC, rc);
        maxC = max(minC, uc);
        minC = min(minC, uc);
        maxC = max(minC, ld);
        minC = min(minC, ld);
        maxC = max(minC, lu);
        minC = min(minC, lu);
        maxC = max(minC, rd);
        minC = min(minC, rd);
        maxC = max(minC, ru);
        minC = min(minC, ru);

        uint2 fullIndex = half2FullIndex(id);
        float2 uv = (fullIndex + 0.5) * _WH.zw;
        float2 motion = _MotionTex[fullIndex];
        float speed = saturate(length(motion));
        float2 prevUV = uv - motion;

        float4 hc = _History.SampleLevel(linear_clamp_sampler, prevUV, 0);
        float3 av_c = _Result[id].xyz;
        hc.xyz += 3 * av_c;
        hc = max(hc, 0);

        float3 n = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, uv, 0).xyz);
        float3 hn = DecodeNormal(_HistoryNormal.SampleLevel(point_clamp_sampler, prevUV, 0).xyz);
        float d = _DepthTex.SampleLevel(point_clamp_sampler, uv, 0).x;
        float hd = _HistoryDepth.SampleLevel(point_clamp_sampler, prevUV, 0).x;

        float3 wpos;
        {
            float4 ndc = float4(uv * 2 - 1, d, 1);
            float4 worldPos = mul(_VP_Inv, ndc);
            wpos = worldPos.xyz / worldPos.w;
        }
        float3 hwpos;
        {
            float4 ndc = float4(prevUV * 2 - 1, hd, 1);
            float4 worldPos = mul(_Last_VP_Inv, ndc);
            hwpos = worldPos.xyz / worldPos.w;
        }

        float distance_weight = max(0, 1 - distance(wpos, hwpos));
        float normal_weight = max(0, dot(hn, n) + 0.2);

        float weight = saturate(distance_weight * normal_weight);

        if (any(prevUV > 1) || any(prevUV < 0)) {
            weight = 0.02;
        }

        float mix_rate = (oc.w * hc.w == 0) ? 0 : lerp(0.995, 0, speed);

        minC -= lerp(0.7, 0.05, speed) * weight;
        maxC += lerp(0.7, 0.05, speed) * weight;

        hc.xyz = clamp(hc.xyz, minC.xyz, maxC.xyz);

        float sampleNum = hc.w * weight + oc.w;

        mix_rate *= clamp((sampleNum - 1) / sampleNum, 0.7, 0.99);

        float4 mixed = lerp(oc, hc, mix_rate);

        _Variance[id] = float2(max(0.2, 1 - sampleNum / 150), _Variance[id].y); //abs(av_c);// 

        _Result[id] = float4(mixed.xyz, sampleNum);
    }
}


int variance;
float2 _ProcessRange;

#define SPATIAL_RADIUS 7
#define GROUPSHARED_SIZE (8 + SPATIAL_RADIUS * 2)
#define GROUPSHARED_COUNT (GROUPSHARED_SIZE * GROUPSHARED_SIZE)
groupshared float4 buffer2_0[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared float4 buffer2_1[GROUPSHARED_SIZE][GROUPSHARED_SIZE];
groupshared bool active;

RWStructuredBuffer<int> _Indirect;
StructuredBuffer<uint> _Block;
RWStructuredBuffer<uint> _NextBlock;

void SFilter_(uint2 id, uint2 groupThreadID, uint2 groupID, bool var = false) {
    //return;
    uint2 fullResIndex = half2FullIndex(id);
    float3 diffuse = _BaseColorTex[fullResIndex].xyz * (1 - _BaseColorTex[fullResIndex].w);
    float4 gi = _Result[id];
    float4 di = _SceneColor[fullResIndex];
    float blur = clamp(gi.w / 150, 0, 0.8);
    blur = di.a == 0 ? 1 : blur;
    blur = max(blur, 1 - max(UnToneMap(gi.xyz) * diffuse) / max(di.xyz));
    blur = gi.w <= 30 ? 0 : blur;
    uint2 wh;
    _HalfIndexTex.GetDimensions(wh.x, wh.y);

    // load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - SPATIAL_RADIUS;
        int loop_num = GROUPSHARED_COUNT / 64 + (GROUPSHARED_COUNT % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < GROUPSHARED_COUNT) {
                uint2 offset = uint2(task_id % GROUPSHARED_SIZE, task_id / GROUPSHARED_SIZE);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= wh)) {
                    buffer2_0[offset.x][offset.y] = 0;
                    buffer2_1[offset.x][offset.y] = 0;
                }
                else {
                    float4 newC = _Result[texID];
                    texID = half2FullIndex(texID);
                    float4 n_m = _NormalTex[texID];
                    float  d = PD2VD(_DepthTex[texID].r);
                    float3 normal = DecodeNormal(n_m.xyz);
                    buffer2_0[offset.x][offset.y] = newC;
                    buffer2_1[offset.x][offset.y] = float4(normal, d);
                }
            }
        }
        if (all(groupThreadID == 0)) active = false;
        GroupMemoryBarrierWithGroupSync();
    }

    {
        //need lager filter
        if (blur < _ProcessRange.x)
            active = true;

        blur = (blur - _ProcessRange.x) / (_ProcessRange.y - _ProcessRange.x);

        // spatial filter
        {
            int2 baseID = groupThreadID + SPATIAL_RADIUS;
            float4 original = buffer2_0[baseID.x][baseID.y];
            float distance_coef = lerp(5, 1, smoothstep(0, 10, gi.w));
            float4 cn_cd = buffer2_1[baseID.x][baseID.y];
            float3 cn = cn_cd.xyz;
            float cd = cn_cd.w;
            float normal_coef = 0.992;
            if (var) normal_coef = _Variance[id].y ? 0.5 : 0.992;
            if (!variance) normal_coef = 0;
            normal_coef *= smoothstep(0, 10, gi.w);
            normal_coef *= max(0, 1 - 0.002 * (cd * cd));
            {
                float L = 0;
                float L2 = 0;
                int count = 0;
                float4 res = 0;
                float w = 0;
                for (int i = -SPATIAL_RADIUS; i <= SPATIAL_RADIUS; i++)
                {
                    int2 id_in_shared = int2(baseID.x + i, baseID.y);
                    float4 n_d = buffer2_1[id_in_shared.x][id_in_shared.y];
                    float3 normal = n_d.xyz;
                    float d = n_d.w;
                    float4 l = buffer2_0[id_in_shared.x][id_in_shared.y];
                    float weight = (l.w != 0) * smoothstep(normal_coef, 1, dot(cn, normal)) * max(0, 1 - abs(d - cd));
                    res += l * weight;
                    w += weight;
                    if (l.w) {
                        float lum = Luminance(l.xyz);
                        L += lum;
                        L2 += lum * lum;
                        count++;
                    }
                }
                float4 diffuse = res / max(1, w);
                if (!var) {
                    L2 /= max(1, count);
                    L /= max(1, count);
                    float v = saturate(max(0, L2 - L * L) * 80);

                    //_Variance[id] = float2(v, w <= 3);
                    buffer2_0[baseID.x][baseID.y] = float4(diffuse.xyz, original.w);
                }
                else {
                    buffer2_0[baseID.x][baseID.y] = float4(variance ? lerp(original.xyz, diffuse.xyz, 1) : diffuse.xyz, original.w);
                }
            }
            GroupMemoryBarrierWithGroupSync();
            {
                float L = 0;
                float L2 = 0;
                int count = 0;
                float4 res = 0;
                float w = 0;
                for (int i = -SPATIAL_RADIUS; i <= SPATIAL_RADIUS; i++)
                {
                    int2 id_in_shared = int2(baseID.x, baseID.y + i);
                    float4 n_d = buffer2_1[id_in_shared.x][id_in_shared.y];
                    float3 normal = n_d.xyz;
                    float d = n_d.w;
                    float4 l = buffer2_0[id_in_shared.x][id_in_shared.y];
                    float weight = (l.w != 0) * smoothstep(normal_coef, 1, dot(cn, normal)) * max(0, 1 - abs(d - cd));
                    res += l * weight;
                    w += weight;
                    if (l.w) {
                        float lum = Luminance(l.xyz);
                        L += lum;
                        L2 += lum * lum;
                        count++;
                    }
                }
                float4 diffuse = res / max(1, w);
                if (!var) {
                    L2 /= max(1, count);
                    L /= max(1, count);
                    float v = saturate(max(0, L2 - L * L) * 80);

                    //_Variance[id] = float2(v, w <= 3);
                    _Result[id] = float4(diffuse.xyz, original.w);
                }
                else {
                    _Result[id] = float4(variance ? lerp(original.xyz, diffuse.xyz, 1) : diffuse.xyz, original.w);
                }
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (all(groupThreadID == 0)) {
        if (active) {
            uint index;
            InterlockedAdd(_Indirect[0], 1, index);
            _NextBlock[index] = (groupID.x << 16) + groupID.y;
        }
    }
}



[numthreads(8, 8, 1)]
void SFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //return;
    SFilter_(id, groupThreadID, groupID);
}

[numthreads(8, 8, 1)]
void SFilterIndirect(uint2 groupThreadID : SV_GroupThreadID, uint groupID : SV_GroupID)
{
    //return;
    uint blockData = _Block[groupID];
    uint2 blockID = uint2(blockData >> 16, blockData & 0xFFFF);
    uint2 actual_groupID = blockID;
    uint2 id = groupThreadID + (actual_groupID << 3);

    SFilter_(id, groupThreadID, actual_groupID, true);
}


groupshared float4 buffer3_0[6][6];
groupshared float4 buffer3_1[6][6];
[numthreads(8, 8, 1)]
void UpSample(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //_FullSizeResult[id] = _Result[id / 2]; return;
    // load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 4 - 1;

        if (thread_id < 36) {
            uint2 wh;
            _HalfIndexTex.GetDimensions(wh.x, wh.y);

            uint2 offset = uint2(thread_id % 6, thread_id / 6);
            uint2 texID = lbID + offset;
            if (any(texID < 0) || any(texID >= wh)) {
                buffer3_0[offset.x][offset.y] = 0;
                buffer3_1[offset.x][offset.y] = 0;
            }
            else {
                float4 c = _Result[texID];
                texID = half2FullIndex(texID);
                float3 normal = DecodeNormal(_NormalTex[texID].xyz);
                float d = _DepthTex[texID];
                buffer3_0[offset.x][offset.y] = c;
                buffer3_1[offset.x][offset.y] = float4(normal, PD2VD(d));
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    if (_SceneColor[id].a == 0) {
        _FullSizeResult[id] = 0;
        return;
    }
    float4 res = 0;
    float w = 0;
    int2 baseID = floor(groupThreadID - 0.9) / 2 + 1;
    float3 cn = DecodeNormal(_NormalTex[id].xyz);
    float cd = PD2VD(_DepthTex[id]);
    bool2 gid_mod2 = groupThreadID % 2;
    float2 bw[2];
    bw[0].x = gid_mod2.x ? 100 : 1;
    bw[0].y = gid_mod2.x ? 1 : 100;
    bw[1].x = gid_mod2.y ? 100 : 1;
    bw[1].y = gid_mod2.y ? 1 : 100;
    for (int i = 0; i <= 1; i++)
    {
        for (int j = 0; j <= 1; j++)
        {
            int2 texID = baseID + int2(i, j);
            float bilinear_weight = bw[0][i] * bw[1][j];

            float4 nd = buffer3_1[texID.x][texID.y];

            float depth_weight = max(0, 0.2 - abs(nd.w - cd)) + 0.001;
            float normal_weight = smoothstep(0.9, 1, dot(cn, nd.xyz)) + 0.001;

            float4 c = buffer3_0[texID.x][texID.y];
            float weight = (c.w > 0) * bilinear_weight * normal_weight * depth_weight;
            res += c * weight;
            w += weight;
        }
    }

    _FullSizeResult[id] = w == 0 ? 0 : res / w;
}


[numthreads(8, 8, 1)]
void FinalSynthesis(uint2 id : SV_DispatchThreadID)
{
    //float3 diffuse = _BaseColorTex[id].xyz;
    //float4 gi = _History[id];
    //float4 di = _SceneColor[id];
    //float blur = clamp(gi.w / 150, 0, 0.8);
    //blur = di.a == 0 ? 1 : blur;
    //blur = max(blur, 1 - max(UnToneMap(gi.xyz) * diffuse) / max(di.xyz));
    //blur = gi.w <= 30 ? 0 : blur;


    //_Result[id] = blur;
    //_Result[id] = _History[id];
    //return;
    //_Result[id] = float4(UnToneMap(_History[id].xyz), 0); return;
    float4 res = _History[id];
    float4 sceneColor = _SceneColor[id];
    sceneColor.a = sceneColor.a != 0;
    _Result[id] = sceneColor + sceneColor.a * float4(UnToneMap(res.xyz ) * _BaseColorTex[id].xyz * (1 - _BaseColorTex[id].w), 0);
}


RWTexture2D<float4> _A, _B;
Texture2D<float4> _C;

[numthreads(8, 8, 1)]
void Subtract(uint2 id : SV_DispatchThreadID)
{
    uint2 fullIndex = half2FullIndex(id);
    float2 uv = (fullIndex + 0.5) * _WH.zw;
    float2 motion = _MotionTex[fullIndex];
    float2 prevUV = uv - motion;

    float4 hc = _History.SampleLevel(point_clamp_sampler, prevUV, 0);
    float3 av_c = _Result[id].xyz;

    _B[id] = lerp(_C.SampleLevel(point_clamp_sampler, prevUV, 0), _A[id] - hc, 0.001) * 0.95;
}

