#pragma kernel DownSampleDepth
#pragma kernel TTFilter
#pragma kernel SFilter
#pragma kernel SFilterIndirect
#pragma kernel UpSample 
#pragma kernel FinalSynthesis
#pragma kernel Subtract

#include "../Includes/GBuffer.hlsl"
#include "../Includes/PBS.hlsl"
#include "../Includes/RT/Include/Sampler.hlsl"

uint _Clock;
float4 _WH;
float4x4 _V, _V_Inv;
float4x4 _P, _P_Inv;
float4x4 _VP, _VP_Inv;
float4x4 _Last_VP_Inv;
float2 _JitterOffset;

Texture2D<float4> _BaseColorTex, _SpecTex, _NormalTex, _SceneColor, _HistoryNormal;
Texture2D<float4> _FilteredColor;
Texture2D<float2> _MotionTex;
Texture2D<float> _DepthTex, _HistoryDepth;
Texture2D<float4> _History;
TextureCube<float3> _SkyBox;
Texture2D<float4> _HisAcc;

SamplerState point_clamp_sampler;
SamplerState linear_clamp_sampler;
SamplerState trilinear_clamp_sampler;

RWTexture2D<float4> _TempResult;
RWTexture2D<float4> _FullSizeResult;
RWTexture2D<float4> _Result;

float PD2VD(const float d) {
    return -_P._m23 / (d + _P._m22);
}
float max(float3 c) {
    return max(max(c.x, c.y), c.z);
}
float3 UnToneMap(float3 color) {
    return color / (1 - color);// color / (0.1 + color);
}

bool CheckFitUV(float2 uv, float3 n, float d, float2 prevUV, out float3 hn, out float hd, out float weight, float coef = 0.5) {
    hd = _HistoryDepth.SampleLevel(point_clamp_sampler, prevUV, 0).x;
    hn = DecodeNormal(_HistoryNormal.SampleLevel(point_clamp_sampler, prevUV, 0).xyz);

    float3 wpos;
    {
        float4 ndc = float4(uv * 2 - 1, d, 1);
        float4 worldPos = mul(_VP_Inv, ndc);
        wpos = worldPos.xyz / worldPos.w;
    }
    float3 hwpos;
    {
        float4 ndc = float4(prevUV * 2 - 1, hd, 1);
        float4 worldPos = mul(_Last_VP_Inv, ndc);
        hwpos = worldPos.xyz / worldPos.w;
    }

    float distance_weight = max(0, 1.1 - distance(wpos, hwpos));
    float normal_weight = 1;// dot(hn, n) > 0.2;

    weight = saturate(distance_weight * normal_weight);

    return weight > coef;
}

void FindBestFitUV(float2 uv, float3 n, float d, inout float2 prevUV, out float3 hn, out float hd, out float weight) {

    float2 cpuv = prevUV;
    float2 offset = _WH.zw;

    float2 s = sign(_JitterOffset);

    prevUV = cpuv;
    if (CheckFitUV(uv, n, d, prevUV, hn, hd, weight)) return;

    prevUV = cpuv + offset.xy * s;
    if (CheckFitUV(uv, n, d, prevUV, hn, hd, weight)) return;

    prevUV = cpuv + offset.xy * float2(s.x, 0);
    if (CheckFitUV(uv, n, d, prevUV, hn, hd, weight)) return;

    prevUV = cpuv + offset.xy * float2(0, s.y);
    if (CheckFitUV(uv, n, d, prevUV, hn, hd, weight)) return;

    weight = 0;
}


[numthreads(8, 8, 1)]
void DownSampleDepth(const uint2 id : SV_DispatchThreadID)
{
}

groupshared float4 buffer_0[10][10];

[numthreads(8, 8, 1)]
void TTFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //_Result[id] = _TempResult[id]; return;
    // Load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - 1;
        int loop_num = 100 / 64 + (100 % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < 100) {
                uint2 offset = uint2(task_id % 10, task_id / 10);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= _WH)) {
                    buffer_0[offset.x][offset.y] = 0;
                }
                else {
                    buffer_0[offset.x][offset.y] = _TempResult[texID];
                }
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // perform temporal
    {
        uint2 bufferID = 1 + groupThreadID;

        float4 oc = buffer_0[bufferID.x][bufferID.y];

        float4 minC = oc, maxC = oc;

        float4 lc = buffer_0[bufferID.x - 1][bufferID.y];
        float4 dc = buffer_0[bufferID.x][bufferID.y - 1];
        float4 rc = buffer_0[bufferID.x + 1][bufferID.y];
        float4 uc = buffer_0[bufferID.x][bufferID.y + 1];
        float4 ld = buffer_0[bufferID.x - 1][bufferID.y - 1];
        float4 lu = buffer_0[bufferID.x - 1][bufferID.y + 1];
        float4 rd = buffer_0[bufferID.x + 1][bufferID.y - 1];
        float4 ru = buffer_0[bufferID.x + 1][bufferID.y + 1];

        // bbox
        maxC = max(minC, lc);
        minC = min(minC, lc);
        maxC = max(minC, dc);
        minC = min(minC, dc);
        maxC = max(minC, rc);
        minC = min(minC, rc);
        maxC = max(minC, uc);
        minC = min(minC, uc);
        maxC = max(minC, ld);
        minC = min(minC, ld);
        maxC = max(minC, lu);
        minC = min(minC, lu);
        maxC = max(minC, rd);
        minC = min(minC, rd);
        maxC = max(minC, ru);
        minC = min(minC, ru);

        oc = min((maxC - minC) + 0.2 + maxC, oc);

        float2 uv = (id + 0.5) * _WH.zw;
        float2 motion = _MotionTex[id];
        float speed = saturate(length(motion));
        float2 prevUV = uv - motion;

        float3 n = DecodeNormal(_NormalTex.SampleLevel(point_clamp_sampler, uv, 0).xyz);
        float d = _DepthTex.SampleLevel(point_clamp_sampler, uv, 0).x;

        float3 hn;
        float hd, weight;
        FindBestFitUV(uv, n, d, /*inout*/prevUV, /*out*/hn, /*out*/hd, /*out*/weight);

        if (any(prevUV > 1) || any(prevUV < 0)) {
            weight = 0.02;
        }

        float4 hc = max(0, _History.SampleLevel(point_clamp_sampler, prevUV, 0));
        float3 av_c = _HisAcc[id].xyz;
        hc.xyz += 3 * av_c;
        hc = max(hc, 0);

        minC -= lerp(0.7, 0, speed) * weight;
        maxC += lerp(0.7, 0, speed) * weight;

        hc.xyz = clamp(hc.xyz, minC.xyz, maxC.xyz);

        float4 spec = _SpecTex[id];
        float smooth_metallic = max(spec.xyz) * (1 - spec.w);
        float mix_rate = lerp(0.9, 0.2, speed) * lerp(0, 1, min(1 - smooth_metallic, weight));

        float4 mixed = lerp(oc, hc, mix_rate);

        _Result[id] = float4(mixed.xyz, 1);
    }
}


float2 _ProcessRange;

#define SPATIAL_RADIUS 6
#define GROUPSHARED_SIZE (8 + SPATIAL_RADIUS * 2)
#define GROUPSHARED_COUNT (GROUPSHARED_SIZE * GROUPSHARED_SIZE)
groupshared float4 buffer2_0[GROUPSHARED_SIZE][33];
groupshared float4 buffer2_1[GROUPSHARED_SIZE][33];
groupshared bool active;

RWStructuredBuffer<int> _Indirect;
StructuredBuffer<uint> _Block;
RWStructuredBuffer<uint> _NextBlock;

void SFilter_(uint2 id, uint2 groupThreadID, uint2 groupID, bool first = false) {
    //return;
    float gi = max(0.5, max(_Result[id].xyz));
    float4 sc = _SceneColor[id];
    float di = max(0.1, max(sc.xyz));
    float diffuse = max(_BaseColorTex[id].xyz * (1 - _BaseColorTex[id].w));
    float dblur = (gi* diffuse) / di;
    float4 spec = _SpecTex[id];
    float sblur = max(spec.xyz) * spec.w;
    sblur = (gi * sblur) / di;
    float blur = sc.a == 0 ? 1 : saturate(1 - max(dblur, sblur));
    //_Result[id] = 1 - blur; return;

    // load current result to shared.
    {
        uint thread_id = groupThreadID.x + groupThreadID.y * 8;
        int2 lbID = groupID * 8 - SPATIAL_RADIUS;
        int loop_num = GROUPSHARED_COUNT / 64 + (GROUPSHARED_COUNT % 64 != 0 ? 1 : 0);
        for (int i = 0; i < loop_num; i++)
        {
            uint task_id = thread_id + i * 64;
            if (task_id < GROUPSHARED_COUNT) {
                uint2 offset = uint2(task_id % GROUPSHARED_SIZE, task_id / GROUPSHARED_SIZE);
                uint2 texID = lbID + offset;
                if (any(texID < 0) || any(texID >= _WH)) {
                    buffer2_0[offset.x][offset.y] = 0;
                    buffer2_1[offset.x][offset.y] = 0;
                }
                else {
                    float4 newC = _Result[texID];
                    float4 n_m = _NormalTex[texID];
                    float  d = PD2VD(_DepthTex[texID].r);
                    float3 normal = DecodeNormal(n_m.xyz);
                    buffer2_0[offset.x][offset.y] = newC;
                    buffer2_1[offset.x][offset.y] = float4(normal, d);
                }
            }
        }
        if (all(groupThreadID == 0)) active = false;
        GroupMemoryBarrierWithGroupSync();
    }

    {
        //need lager filter
        if (blur < _ProcessRange.x)
            active = true;

        blur = (_ProcessRange.y - blur) / (_ProcessRange.y - _ProcessRange.x);

        // spatial filter
        {
            int2 baseID = groupThreadID + SPATIAL_RADIUS;
            float4 original = buffer2_0[baseID.x][baseID.y];
            float4 cn_cd = buffer2_1[baseID.x][baseID.y];
            float3 cn = cn_cd.xyz;
            float cd = cn_cd.w;
            float normal_coef = first ? 0.985 : (original.w < 4 ? 0.9 : 0.985);

            {
                int count = 0;
                float4 res = 0;
                float w = 0;
                for (int i = -SPATIAL_RADIUS; i <= SPATIAL_RADIUS; i++)
                {
                    int2 id_in_shared = int2(baseID.x + i, baseID.y);
                    float4 n_d = buffer2_1[id_in_shared.x][id_in_shared.y];
                    float3 normal = n_d.xyz;
                    float d = n_d.w;
                    float4 l = buffer2_0[id_in_shared.x][id_in_shared.y];
                    float weight = smoothstep(normal_coef, 1, dot(cn, normal))* max(0, 1 - abs(d - cd));
                    weight *= saturate(1 - abs(i) / max(1.5, SPATIAL_RADIUS * blur));
                    res += l * weight;
                    w += weight;
                }
                buffer2_0[baseID.x][baseID.y] = float4(res.xyz / max(1, w), res.w);
            }
            GroupMemoryBarrierWithGroupSync();
            if(blur > 0)
            {
                int count = 0;
                float4 res = 0;
                float w = 0;
                for (int i = -SPATIAL_RADIUS; i <= SPATIAL_RADIUS; i++)
                {
                    int2 id_in_shared = int2(baseID.x, baseID.y + i);
                    float4 n_d = buffer2_1[id_in_shared.x][id_in_shared.y];
                    float3 normal = n_d.xyz;
                    float d = n_d.w;
                    float4 l = buffer2_0[id_in_shared.x][id_in_shared.y];
                    float weight = smoothstep(normal_coef, 1, dot(cn, normal))* max(0, 1 - abs(d - cd));
                    weight *= saturate(1 - abs(i) / max(1.5, SPATIAL_RADIUS * blur));
                    res += l * weight;
                    w += weight;
                }
                _Result[id] = float4(res.xyz / max(1, w), res.w);
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (all(groupThreadID == 0)) {
        if (active) {
            uint index;
            InterlockedAdd(_Indirect[0], 1, index);
            _NextBlock[index] = (groupID.x << 16) + groupID.y;
        }
    }
}



[numthreads(8, 8, 1)]
void SFilter(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //return;
    SFilter_(id, groupThreadID, groupID, true);
}

[numthreads(8, 8, 1)]
void SFilterIndirect(uint2 groupThreadID : SV_GroupThreadID, uint groupID : SV_GroupID)
{
    //return;
    uint blockData = _Block[groupID];
    uint2 blockID = uint2(blockData >> 16, blockData & 0xFFFF);
    uint2 actual_groupID = blockID;
    uint2 id = groupThreadID + (actual_groupID << 3);

    SFilter_(id, groupThreadID, actual_groupID);
}


groupshared float4 buffer3_0[6][6];
groupshared float4 buffer3_1[6][6];
[numthreads(8, 8, 1)]
void UpSample(uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
}


[numthreads(8, 8, 1)]
void FinalSynthesis(uint2 id : SV_DispatchThreadID)
{
    //_Result[id] = _History[id]; return;
    float4 res = _History[id];
    float4 sceneColor = _SceneColor[id];
    sceneColor.a = sceneColor.a != 0;
    _Result[id] = sceneColor + sceneColor.a * float4(max(0, UnToneMap(res.xyz)), 0);
}


RWTexture2D<float4> _HisAccTemp;

[numthreads(8, 8, 1)]
void Subtract(uint2 id : SV_DispatchThreadID)
{
    float2 uv = (id + 0.5) * _WH.zw;
    float2 motion = _MotionTex[id];
    float2 prevUV = uv - motion;

    float4 hc = _History.SampleLevel(point_clamp_sampler, prevUV, 0);
    float4 c = _Result[id];

    _HisAccTemp[id] = lerp(_HisAcc.SampleLevel(point_clamp_sampler, prevUV, 0), c - hc, 0.002) * 0.95;
}

