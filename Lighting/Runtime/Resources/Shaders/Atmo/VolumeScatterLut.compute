#pragma kernel CSMain
#pragma kernel WriteSunBuffer

#define T T_TAB
#include "../Includes/Atmo/Atmo.hlsl"
#include "../Includes/Atmo/Sun.hlsl"

RWTexture3D<float3> _Result;
float3 _Size;

float4 _WorldSpaceCameraPos;

float _Multiplier;

[numthreads(4, 4, 4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (any(id >= uint3(_Size))) return;

    float3 uv;
    uv.xy = (id.xy + 0.5) / _Size.xy;
    uv.z = id.z / (_Size.z - 1);

    float3 s = normalize(_SunDir);
    float3 x = float3(0, planet_radius + max(95, _WorldSpaceCameraPos.y), 0);
    float d = uv.z * _MaxDepth;

    float phi = atan(s.z / s.x) + (s.x > 0 ? (s.z < 0 ? 2 * pi : 0) : pi);
    phi = s.x == 0 ? (s.z > 0 ? pi / 2 : -pi / 2) : phi;
    phi += uv.x * uv.x * uv.x * pi;

    float vx, vz;
    sincos(phi, vz, vx);

    float ro = uv.y;
    if (ro > 0.5) {
        ro = ro - 0.5;
        float horiz = length(x);
        horiz = -sqrt(horiz * horiz - planet_radius * planet_radius) / horiz;

        if (length(x) > atmosphere_radius) {
            float ahoriz = length(x);
            ahoriz = -sqrt(ahoriz * ahoriz - atmosphere_radius * atmosphere_radius) / ahoriz;
            ro = lerp(horiz + 0.0001, ahoriz - 0.0001, ro * 2);
        }
        else
            ro = lerp(horiz + 0.0001, 1, pow(ro * 2, 2));
    }
    else {
        float horiz = length(x);
        horiz = -sqrt(horiz * horiz - planet_radius * planet_radius) / horiz;
        ro = lerp(-1, horiz - 0.0001, pow(ro * 2, 0.5));
    }

    float vy = ro / sqrt(max(0, 1 - ro * ro));
    float3 v = normalize(float3(vx, vy, vz));

    float3 res = 0;

    float3 x_0;
    if (x.y > atmosphere_radius - 1) {
        float2 dis;
        if (!X_Up(x, v, dis) || dis.x > d) {
            _Result[id] = 0;
            return;
        }
        dis.y = min(d, dis.y);
        x_0 = x + dis.y * v;
        x = x + dis.x * v;
    }
    else {
        X_0(x, v, x_0);
        float d_ = distance(x, x_0);
        d_ = min(d_, d);
        x_0 = x + v * d_;
    }
    res = Scatter(x, x_0, v, s, 16, false);

    _Result[id] = res * _SunLuminance * _Multiplier;
}

RWStructuredBuffer<SunLight> _Sun_;

[numthreads(1, 1, 1)]
void WriteSunBuffer(uint3 id : SV_DispatchThreadID)
{
    SunLight sl;
    sl.dir = _SunDir;
    sl.color = _SunColor * Sunlight(float3(0, planet_radius + max(_WorldSpaceCameraPos.y, 95), 0), sl.dir);
    sl.angle = _SunAngle;
    _Sun_[0] = sl;
}