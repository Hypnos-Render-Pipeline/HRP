#pragma kernel CSMain

#define T T_TAB
#include "../Includes/Atmo/Atmo.hlsl"

RWTexture3D<float3> _Result;
float3 _Size;

float4x4 _P_Inv, _V_Inv;
float4 _WorldSpaceCameraPos;

[numthreads(4, 4, 4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (any(id >= uint3(_Size))) return;

    float3 uv = (id + 0.5) / _Size;

    float4 dispatch_dir = mul(_V_Inv, float4(0, 0, -1, 0));
    float3 dir = normalize(dispatch_dir.xyz);


    float3 s = normalize(_SunDir);
    float3 x = float3(0, planet_radius + max(95, _WorldSpaceCameraPos.y), 0);
    float d = uv.z * _MaxDepth;

    float phi = atan(dir.z / dir.x) + (dir.x > 0 ? (dir.z < 0 ? 2 * pi : 0) : pi);
    phi = dir.x == 0 ? (dir.z > 0 ? pi / 2 : -pi / 2) : phi;
    phi += uv.x * pi - pi / 2;

    float vx, vz;
    sincos(phi, vz, vx);

    float ro = uv.y;
    if (ro > 0.5) {
        ro = ro - 0.5;
        float horiz = length(x);
        horiz = -sqrt(horiz * horiz - planet_radius * planet_radius) / horiz;

        if (length(x) > atmosphere_radius) {
            float ahoriz = length(x);
            ahoriz = -sqrt(ahoriz * ahoriz - atmosphere_radius * atmosphere_radius) / ahoriz;
            ro = lerp(horiz + 0.0001, ahoriz - 0.0001, ro * 2);
        }
        else
            ro = lerp(horiz + 0.0001, 1, pow(ro * 2, 2));
    }
    else {
        float horiz = length(x);
        horiz = -sqrt(horiz * horiz - planet_radius * planet_radius) / horiz;
        ro = lerp(-1, horiz - 0.0001, pow(ro * 2, 0.5));
    }

    float vy = ro / sqrt(max(0, 1 - ro * ro));
    float3 v = normalize(float3(vx, vy, vz));

    float3 res = 0;

    [unroll]
    do {
        float3 x_0;
        if (x.y > atmosphere_radius - 1) {
            float2 dis;
            if (!X_Up(x, v, dis)) break;
            if (dis.x > d) break;
            dis.y = min(d, dis.y);
            x = x + dis.x * v;
            x_0 = x + dis.y * v;
        }
        else {
            X_0(x, v, x_0);
            float d_ = distance(x, x_0);
            d_ = min(d_, d);
            x_0 = x + v * d_;
        }
        res = Scatter(x, x_0, v, s, 16, false);
    } while (0);

    _Result[id] = res * _SunLuminance;
}
